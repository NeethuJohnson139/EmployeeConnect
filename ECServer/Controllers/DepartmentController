using ECServer.Database;
using ECServer.Models;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Data;

namespace ECServer.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DepartmentController : ControllerBase
    {
        private readonly DataLayer _dataLayer;

        public DepartmentController(DataLayer dataLayer)
        {
            _dataLayer = dataLayer;
        }

        // GET: api/Department
        [HttpGet]
        public IActionResult GetAllDepartments()
        {
            var dt = _dataLayer.GetFromDb("sp_GetAllDepartments");
            if (dt == null) return StatusCode(500, "Internal server error.");

            var departments = new List<Department>();

            foreach (DataRow row in dt.Rows)
            {
                departments.Add(new Department
                {
                    DepartmentId = Convert.ToInt32(row["DepartmentId"]),
                    DepartmentName = row["DepartmentName"].ToString(),
                    AddedDate = Convert.ToDateTime(row["AddedDate"])
                });
            }

            return Ok(departments);
        }

        // GET: api/Department/{id}
        [HttpGet("{id}")]
        public IActionResult GetDepartmentById(int id)
        {
            var parameters = new Dictionary<string, object>
            {
                { "@DepartmentId", id }
            };

            var dt = _dataLayer.GetFromDb("sp_GetDepartmentById", parameters);
            if (dt == null || dt.Rows.Count == 0) return NotFound("Department not found.");

            var row = dt.Rows[0];
            var department = new Department
            {
                DepartmentId = Convert.ToInt32(row["DepartmentId"]),
                DepartmentName = row["DepartmentName"].ToString(),
                AddedDate = Convert.ToDateTime(row["AddedDate"])
            };

            return Ok(department);
        }

        // POST: api/Department
        [HttpPost]
        public IActionResult CreateDepartment(Department department)
        {
            var parameters = new Dictionary<string, object>
            {
                { "@DepartmentName", department.DepartmentName }
            };

            var result = _dataLayer.ExecuteNonQuery("sp_AddDepartment", parameters);
            if (result == -1) return StatusCode(500, "Error creating department.");

            return CreatedAtAction(nameof(GetDepartmentById), new { id = department.DepartmentId }, department);
        }

        // PUT: api/Department/{id}
        [HttpPut("{id}")]
        public IActionResult UpdateDepartment(int id, Department department)
        {
            var parameters = new Dictionary<string, object>
            {
                { "@DepartmentId", id },
                { "@DepartmentName", department.DepartmentName }
            };

            var result = _dataLayer.ExecuteNonQuery("sp_UpdateDepartment", parameters);
            if (result == -1) return StatusCode(500, "Error updating department.");

            return NoContent();
        }

        
    }
}
